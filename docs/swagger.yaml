definitions:
  structs.Championship:
    properties:
      id:
        type: integer
      matches:
        description: Lista de partidas que fazem parte deste campeonato
        items:
          $ref: '#/definitions/structs.Match'
        type: array
      name:
        type: string
      year:
        type: integer
    type: object
  structs.Live:
    properties:
      championship:
        $ref: '#/definitions/structs.Championship'
      datematch:
        type: string
      draws:
        type: integer
      hometeam:
        $ref: '#/definitions/structs.Team'
      hometeamrecentperformance:
        type: number
      hometeamwins:
        type: integer
      id:
        type: integer
      stadium:
        type: string
      statusmatch:
        type: string
      teampoints1:
        type: integer
      teampoints2:
        type: integer
      visitingteam:
        $ref: '#/definitions/structs.Team'
      visitingteamrecentperformance:
        type: number
      visitingteamwins:
        type: integer
    type: object
  structs.Match:
    properties:
      championship:
        allOf:
        - $ref: '#/definitions/structs.Championship'
        description: Campeonato da partida
      championshipId:
        description: Identificador do campeonato
        type: integer
      id:
        description: Identificador Ãºnico para a partida
        type: integer
    type: object
  structs.Player:
    properties:
      birth:
        type: string
      city:
        type: string
      country:
        type: string
      height:
        type: number
      id:
        type: integer
      idteam:
        type: integer
      name:
        type: string
      position:
        type: string
    type: object
  structs.Team:
    properties:
      city:
        type: string
      country:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  structs.User:
    properties:
      cash:
        type: number
      id:
        type: integer
      password:
        type: string
      photo:
        items:
          type: integer
        type: array
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This API allows users to manage football teams and players. Users can
    enter new teams and players, update existing information, and view details.
  title: Squads API
paths:
  /api/v1/championship/fetchbyid/{id}:
    get:
      consumes:
      - application/json
      description: Fetch a championship by ID
      parameters:
      - description: Championship ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Championship'
      summary: Fetch a championship by ID
      tags:
      - Championships
  /api/v1/live/getall:
    get:
      consumes:
      - application/json
      description: Get all matches
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Live'
            type: array
      summary: Get all matches
      tags:
      - Lives
  /api/v1/live/getallbyidteam:
    get:
      consumes:
      - application/json
      description: Get all matches by team id
      parameters:
      - description: Team
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/structs.Team'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Live'
            type: array
      summary: Get all matches by team id
      tags:
      - Lives
  /api/v1/live/getalltoday:
    get:
      consumes:
      - application/json
      description: Get all matches today
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Live'
            type: array
      summary: Get all matches today
      tags:
      - Lives
  /api/v1/live/getbyid:
    get:
      consumes:
      - application/json
      description: Get a live match by ID
      parameters:
      - description: Live Match
        in: body
        name: live
        required: true
        schema:
          $ref: '#/definitions/structs.Live'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Live'
      summary: Get a live match by ID
      tags:
      - Lives
  /api/v1/live/insert:
    post:
      consumes:
      - application/json
      description: Insert a live match
      parameters:
      - description: Live Match
        in: body
        name: live
        required: true
        schema:
          $ref: '#/definitions/structs.Live'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Live'
      summary: Insert a live match
      tags:
      - Lives
  /api/v1/live/update:
    put:
      consumes:
      - application/json
      description: Update a live match
      parameters:
      - description: Live Match
        in: body
        name: live
        required: true
        schema:
          $ref: '#/definitions/structs.Live'
      produces:
      - application/json
      responses:
        "200":
          description: Partida ao vivo atualizada com sucesso.
          schema:
            type: string
      summary: Update a live match
      tags:
      - Lives
  /api/v1/player/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a player by ID
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete a player by ID
      tags:
      - Players
  /api/v1/player/getall:
    get:
      consumes:
      - application/json
      description: Get all players
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Player'
            type: array
      summary: Get all players
      tags:
      - Players
  /api/v1/player/getbycountry/{country}:
    get:
      consumes:
      - application/json
      description: Get players by country
      parameters:
      - description: Country Name
        in: path
        name: country
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Player'
            type: array
      summary: Get players by country
      tags:
      - Players
  /api/v1/player/getbyid/{id}:
    get:
      consumes:
      - application/json
      description: Get a player by ID
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Player'
      summary: Get a player by ID
      tags:
      - Players
  /api/v1/player/getbyidteam/{idteam}:
    get:
      consumes:
      - application/json
      description: Get players by team ID
      parameters:
      - description: IdTeam
        in: path
        name: idteam
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Player'
            type: array
      summary: Get players by team ID
      tags:
      - Players
  /api/v1/player/getbyname/{name}:
    get:
      consumes:
      - application/json
      description: Get players by name
      parameters:
      - description: Player Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Player'
            type: array
      summary: Get players by name
      tags:
      - Players
  /api/v1/player/insert:
    post:
      consumes:
      - application/json
      description: Insert a player
      parameters:
      - description: Player Name
        in: query
        name: name
        required: true
        type: string
      - description: Id Team
        in: query
        name: idteam
        required: true
        type: string
      - description: City
        in: query
        name: city
        required: true
        type: string
      - description: Country
        in: query
        name: country
        required: true
        type: string
      - description: Birth
        in: query
        name: birth
        required: true
        type: string
      - description: Height
        in: query
        name: height
        required: true
        type: string
      - description: Position
        in: query
        name: position
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Player'
      summary: Insert a player
      tags:
      - Players
  /api/v1/player/update:
    put:
      consumes:
      - application/json
      description: Update a player
      parameters:
      - description: ID Player
        in: query
        name: id
        required: true
        type: integer
      - description: Player Name
        in: query
        name: name
        required: true
        type: string
      - description: Id Team
        in: query
        name: idteam
        required: true
        type: integer
      - description: City
        in: query
        name: city
        required: true
        type: string
      - description: Country
        in: query
        name: country
        required: true
        type: string
      - description: Birth
        in: query
        name: birth
        required: true
        type: string
      - description: Height
        in: query
        name: height
        required: true
        type: string
      - description: Position
        in: query
        name: position
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Player'
      summary: Update a player
      tags:
      - Players
  /api/v1/team/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete a team by ID
      tags:
      - Teams
  /api/v1/team/fetchbyid/{id}:
    get:
      consumes:
      - application/json
      description: Fetch a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Team'
      summary: Fetch a team by ID
      tags:
      - Teams
  /api/v1/team/getall:
    get:
      consumes:
      - application/json
      description: Get all teams
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Team'
            type: array
      summary: Get all teams
      tags:
      - Teams
  /api/v1/team/getbychampionship/{id}:
    get:
      consumes:
      - application/json
      description: Get teams by a given championship ID
      parameters:
      - description: ID Championship
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Team'
            type: array
      summary: Get teams by championship
      tags:
      - Teams
  /api/v1/team/getbycountry/{country}:
    get:
      consumes:
      - application/json
      description: Get teams by country
      parameters:
      - description: Country Name
        in: path
        name: country
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Team'
            type: array
      summary: Get teams by country
      tags:
      - Teams
  /api/v1/team/getbyid/{id}:
    get:
      consumes:
      - application/json
      description: Get a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Team'
      summary: Get a team by ID
      tags:
      - Teams
  /api/v1/team/getbyname/{name}:
    get:
      consumes:
      - application/json
      description: Get teams by name
      parameters:
      - description: Team Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/structs.Team'
            type: array
      summary: Get teams by name
      tags:
      - Teams
  /api/v1/team/insert:
    post:
      consumes:
      - application/json
      description: Insert a team
      parameters:
      - description: Team Name
        in: query
        name: name
        required: true
        type: string
      - description: City
        in: query
        name: city
        required: true
        type: string
      - description: Country
        in: query
        name: country
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.Team'
      summary: Insert a team
      tags:
      - Teams
  /api/v1/user/login:
    post:
      consumes:
      - multipart/form-data
      description: Login a new user with username and password
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a new user
      tags:
      - Users
  /api/v1/user/register:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user with username, password and an optional photo
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: User Photo
        in: formData
        name: photo
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structs.User'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Users
schemes:
- http
swagger: "2.0"
